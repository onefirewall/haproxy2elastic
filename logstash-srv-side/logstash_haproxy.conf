input {
  file {
    path => "/var/log/haproxy.log"
    type => "haproxy-access"  # a type to identify those logs (will need this later)
    start_position => "beginning"
  }
}

filter {
  grok {
    match => {
      "message" => [
      "%{IP:[haproxy][client][ip]}:%{NUMBER:[haproxy][client][port]} \[%{NOTSPACE:[haproxy][request_date]}\] %{NOTSPACE:[haproxy][frontend_name]} %{NOTSPACE:[haproxy][backend_name]}/%{NOTSPACE:[haproxy][server_name]} %{NUMBER:[haproxy][http][request][time_wait_ms]}/%{NUMBER:[haproxy][total_waiting_time_ms]}/%{NUMBER:[haproxy][connection_wait_time_ms]}/%{NUMBER:[haproxy][http][request][time_wait_without_data_ms]}/%{NUMBER:[haproxy][http][request][time_active_ms]} %{NUMBER:[haproxy][http][response][status_code]} %{NUMBER:[haproxy][bytes_read]} %{NOTSPACE:[haproxy][http][request][captured_cookie]} %{NOTSPACE:[haproxy][http][response][captured_cookie]} %{NOTSPACE:[haproxy][termination_state]} %{NUMBER:[haproxy][connections][active]}/%{NUMBER:[haproxy][connections][frontend]}/%{NUMBER:[haproxy][connections][backend]}/%{NUMBER:[haproxy][connections][server]}/%{NUMBER:[haproxy][connections][retries]} %{NUMBER:[haproxy][server_queue]}/%{NUMBER:[haproxy][backend_queue]} (\{%{IP:[haproxy][original][ip]}:%{NUMBER:[haproxy][original][port]}\} )?\"%{GREEDYDATA:[haproxy][http][request][raw_request_line]}\"",
      "%{TIME:[haproxy][request_date]} %{NOTSPACE:[haproxy][request_srv]} %{NOTSPACE:[haproxy][request_srv_service]}\[%{WORD:[haproxy][request_srv_service_pid]}\]: \{%{WORD:[haproxy][type][key]}:%{WORD:[haproxy][type][value]},%{WORD:[haproxy][timestamp][key]}:%{NUMBER:[haproxy][timestamp][value]},%{WORD:[haproxy][http_status][key]}:%{NUMBER:[haproxy][http_status][value]},%{WORD:[haproxy][http_request][key]}:%{DATA:[haproxy][http_request][value]},%{WORD:[haproxy][remote_addr][key]}:%{IP:[haproxy][remote_addr][value]},%{WORD:[haproxy][bytes_read][key]}:%{NUMBER:[bytes_read][type][value]},%{WORD:[haproxy][upstream_addr][key]}:%{IP:[haproxy][upstream_addr][value]},%{WORD:[haproxy][backend_name][key]}:%{WORD:[haproxy][backend_name][value]},%{WORD:[haproxy][retry][key]}:%{NUMBER:[haproxy][retry][value]},%{WORD:[haproxy][bytes_uploaded][key]}:%{NUMBER:[haproxy][bytes_uploaded][value]},%{WORD:[haproxy][upstream_resp_time][key]}:%{NUMBER:[haproxy][upstream_resp_time][value]},%{WORD:[haproxy][upstream_conn_time][key]}:%{NUMBER:[haproxy][upstream_conn_time][value]},%{WORD:[haproxy][session_duration][key]}:%{NUMBER:[haproxy][session_duration][value]},%{WORD:[haproxy][termination_state][key]}:%{DATA:[haproxy][termination_state][value]},%{WORD:[haproxy][original_ip][key]}:\{%{IP:[haproxy][original_ip][value]}\}\}",
      "%{TIME:[haproxy][request_date]} %{NOTSPACE:[haproxy][request_srv]} %{NOTSPACE:[haproxy][request_srv_service]}\[%{NOTSPACE:[haproxy][request_srv_service_pid]}\]\: \{%{GREEDYDATA:[haproxy][message]}\{%{IP:[haproxy][original_ip]}\}\}"
      ]
    }
    pattern_definitions => {
      "HAPROXY_DATE" => "(%{MONTHDAY}[/-]%{MONTH}[/-]%{YEAR}:%{HOUR}:%{MINUTE}:%{SECOND})|%{SYSLOGTIMESTAMP}"
      }
  }
#  date {
#    match => [
#      "[haproxy][request_date]",
#      "dd/MMM/yyyy:HH:mm:ss.SSS",
#      "dd/MMM/yyyy:HH:mm:ss",
#      "MMM dd HH:mm:ss"
#    ]
#    target => "@timestamp"
#  }
#  geoip {
#    source => "[haproxy][client][ip]"
#    target => "[haproxy][geoip]"
#  }
}

output {
  elasticsearch {
    hosts => "https://elk.dev.onefirewall.com:8443"
    manage_template => false
    document_type => "%{[@metadata][type]}"
    ssl => true
    ssl_certificate_verification => false
    cacert => '/opt/ssl/cert-elk.pem'
  }
}

# /opt/logstash/bin/logstash -e 'input { stdin { } } output { stdout {} }' 
# whereis -b logstash
# service logstash restart
